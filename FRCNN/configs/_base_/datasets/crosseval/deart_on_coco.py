# dataset settings
dataset_type = 'CocoDataset'
data_root = 'data/deart/'

classes = ['person',
 'angel',
 'sword',
 'sheep',
 'cow',
 'donkey',
 'dog',
 'horse',
 'shepherd',
 'tree',
 'prayer',
 'lance',
 'boat',
 'helmet',
 'scroll',
 'shield',
 'jug',
 'nude',
 'unicorn',
 'devil',
 'monk',
 'halo',
 'banner',
 'knight',
 'bird',
 'butterfly',
 'book',
 'mitre',
 'crozier',
 'arrow',
 'palm',
 'lily',
 'horn',
 'apple',
 'trumpet',
 'crown',
 'god the father',
 'monkey',
 'deer',
 'rooster',
 'zucchetto',
 'dragon',
 'centaur',
 'lion',
 'chalice',
 'skull',
 'hands',
 'crown of thorns',
 'dove',
 'camauro',
 'tiara',
 'key of heaven',
 'crucifixion',
 'saturno',
 'stole',
 'orange',
 'zebra',
 'elephant',
 'cat',
 'bear',
 'judith',
 'head',
 'swan',
 'holy shroud',
 'serpent',
 'pegasus',
 'eagle',
 'fish',
 'mouse',
 'banana']


img_norm_cfg = dict(
    mean=[123.675, 116.28, 103.53], std=[58.395, 57.12, 57.375], to_rgb=True)
train_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(type='LoadAnnotations', with_bbox=True),
    dict(type='Resize', img_scale=(1333, 800), keep_ratio=True),
    dict(type='RandomFlip', flip_ratio=0.5),
    dict(type='Normalize', **img_norm_cfg),
    dict(type='Pad', size_divisor=32),
    dict(type='DefaultFormatBundle'),
    dict(type='Collect', keys=['img', 'gt_bboxes', 'gt_labels']),
]
test_pipeline = [
    dict(type='LoadImageFromFile'),
    dict(
        type='MultiScaleFlipAug',
        img_scale=(1333, 800),
        flip=False,
        transforms=[
            dict(type='Resize', keep_ratio=True),
            dict(type='RandomFlip'),
            dict(type='Normalize', **img_norm_cfg),
            dict(type='Pad', size_divisor=32),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img']),
        ])
]
data = dict(
    samples_per_gpu=4,
    workers_per_gpu=2,
    train=dict(
        type=dataset_type,
        classes=classes,
        ann_file=data_root + 'deart_train.json',
        img_prefix=data_root + 'images/',
        pipeline=train_pipeline),
    val=dict(
        type=dataset_type,
        classes=classes,
        ann_file=data_root + 'deart_train.json',
        img_prefix=data_root + 'images/',
        pipeline=test_pipeline),
    test=dict(
        type=dataset_type,
        classes=classes,
        ann_file=data_root + 'deart_test.json',
        img_prefix=data_root + 'images/',
        pipeline=test_pipeline))
evaluation = dict(metric=['bbox'])
